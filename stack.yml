AWSTemplateFormatVersion: 2010-09-09
Description: cleth stack

Parameters:
  EC2SecurityGroupName:
    Description: Name of the ec2 security group
    Type: String

  ApplicationLoadBalancerSecurityGroupName:
    Description: Name of the application load balancer security group
    Type: String

  VpcCidr:
    Description: IP range (CIDR notation) for this VPC
    Type: String

  PublicSubnetACidr:
    Description: IP range (CIDR notation) for the public subnet A in the first Availability Zone
    Type: String

  PublicSubnetBCidr:
    Description: IP range (CIDR notation) for the public subnet B in the second Availability Zone
    Type: String

  PrivateSubnetACidr:
    Description: IP range (CIDR notation) for the private subnet A in the first Availability Zone
    Type: String

  PrivateSubnetBCidr:
    Description: IP range (CIDR notation) for the private subnet B in the second Availability Zone
    Type: String

Resources:
  EthVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true

  ElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref EthVPC

  ElasticIpAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt ElasticIp.AllocationId

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetACidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref EthVPC

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetBCidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref EthVPC

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetACidr
      MapPublicIpOnLaunch: false
      VpcId: !Ref EthVPC

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetBCidr
      MapPublicIpOnLaunch: false
      VpcId: !Ref EthVPC

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to manage access to ETH Application Load Balancer
      GroupName: !Ref ApplicationLoadBalancerSecurityGroupName
      VpcId: !Ref EthVPC

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to manage access to ETH EC2
      GroupName: !Ref Ec2SecurityGroupName
      VpcId: !Ref EthVPC

  Ec2InboundFromAlb:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId: !Ref Ec2SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref AlbSecurityGroup
      ToPort: -1

  Ec2InboundFromEc2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId: !Ref Ec2SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref Ec2ecurityGroup
      ToPort: -1

  AlbInboundFromAlb:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref AlbSecurityGroup
      ToPort: -1

  AlbInboundFromEc2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref Ec2SecurityGroup
      ToPort: -1

  AlbOutboundToAlb:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      FromPort: -1
      DestinationSecurityGroupId: !Ref AlbSecurityGroup
      IpProtocol: -1
      GroupId: !Ref AlbSecurityGroup
      ToPort: -1

  AlbOutboundToEc2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      FromPort: -1
      DestinationSecurityGroupId: !Ref Ec2SecurityGroup
      IpProtocol: -1
      GroupId: !Ref AlbSecurityGroup
      ToPort: -1
