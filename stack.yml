AWSTemplateFormatVersion: 2010-09-09
Description: cleth stack

Parameters:
  ECSClusterName:
    Description: Name of the ECS Cluster
    Type: String

  EC2SecurityGroupName:
    Description: Name of the EC2 security group
    Type: String

  ApplicationLoadBalancerSecurityGroupName:
    Description: Name of the application load balancer security group
    Type: String

  VPCCidr:
    Description: IP range (CIDR notation) for this VPC
    Type: String

  PublicSubnetACidr:
    Description: IP range (CIDR notation) for the public subnet A in the first Availability Zone
    Type: String

  PublicSubnetBCidr:
    Description: IP range (CIDR notation) for the public subnet B in the second Availability Zone
    Type: String

  PrivateSubnetACidr:
    Description: IP range (CIDR notation) for the private subnet A in the first Availability Zone
    Type: String

  PrivateSubnetBCidr:
    Description: IP range (CIDR notation) for the private subnet B in the second Availability Zone
    Type: String

Resources:
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref EthVPC

  EthVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true

  ElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref EthVPC

  ElasticIpAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt ElasticIp.AllocationId

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetACidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref EthVPC

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetBCidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref EthVPC

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetACidr
      MapPublicIpOnLaunch: false
      VpcId: !Ref EthVPC

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetBCidr
      MapPublicIpOnLaunch: false
      VpcId: !Ref EthVPC

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to manage access to ETH Application Load Balancer
      GroupName: !Ref ApplicationLoadBalancerSecurityGroupName
      VpcId: !Ref EthVPC

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to manage access to ETH EC2
      GroupName: !Ref EC2SecurityGroupName
      VpcId: !Ref EthVPC

  EC2InboundFromAlb:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref AlbSecurityGroup
      ToPort: -1

  EC2InboundFromEC2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      ToPort: -1

  AlbInboundFromAlb:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref AlbSecurityGroup
      ToPort: -1

  AlbInboundFromEC2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      ToPort: -1

  AlbOutboundToAlb:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      FromPort: -1
      DestinationSecurityGroupId: !Ref AlbSecurityGroup
      IpProtocol: -1
      GroupId: !Ref AlbSecurityGroup
      ToPort: -1

  AlbOutboundToEC2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      FromPort: -1
      DestinationSecurityGroupId: !Ref EC2SecurityGroup
      IpProtocol: -1
      GroupId: !Ref AlbSecurityGroup
      ToPort: -1

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${ECSClusterName}-executionrole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: EC2EthereumPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - ecs:CreateCluster"
              - ecs:DeregisterContainerInstance"
              - ecs:DiscoverPollEndpoint"
              - ecs:Poll"
              - ecs:RegisterContainerInstance"
              - ecs:StartTelemetrySession"
              - ecs:Submit*"
              - ecr:GetAuthorizationToken"
              - ecr:BatchCheckLayerAvailability"
              - ecr:GetDownloadUrlForLayer"
              - ecr:BatchGetImage"
              - logs:CreateLogStream"
              - logs:PutLogEvents"
              - dynamodb:BatchGetItem"
              - dynamodb:BatchWriteItem"
              - dynamodb:PutItem"
              - dynamodb:DeleteItem"
              - dynamodb:GetItem"
              - dynamodb:Scan"
              - dynamodb:Query"
              - dynamodb:UpdateItem"
            Resource: "*"

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole
