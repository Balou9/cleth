AWSTemplateFormatVersion: 2010-09-09
Description: cleth stack

Parameters:
  SecurityGroup:
    Description: security group for ECS hosts
    Type: AWS::EC2::SecurityGroup::Id

  Subnets:
    Description: subnets to run ECS service in
    Type: List<AWS::EC2::Subnet::Id>

  InstanceType:
    Type: String
    Description: ECS instance type

  SnapshotId:
    Type: String
    Description: EBS Snapshot from which to initiate the chain data
    Default: ""

  VolumeSize:
    Type: Number
    Default: 100

  VolumeType:
    Type: String
    
  ECSClusterName:
    Description: Name of the ECS Cluster
    Type: String

  EC2SecurityGroupName:
    Description: Name of the EC2 security group
    Type: String

  ApplicationLoadBalancerSecurityGroupName:
    Description: Name of the application load balancer security group
    Type: String

  VPCCidr:
    Description: IP range (CIDR notation) for this VPC
    Type: String

  PublicSubnetACidr:
    Description: IP range (CIDR notation) for the public subnet A in the first Availability Zone
    Type: String

  PublicSubnetBCidr:
    Description: IP range (CIDR notation) for the public subnet B in the second Availability Zone
    Type: String

  PrivateSubnetACidr:
    Description: IP range (CIDR notation) for the private subnet A in the first Availability Zone
    Type: String

  PrivateSubnetBCidr:
    Description: IP range (CIDR notation) for the private subnet B in the second Availability Zone
    Type: String

Resources:
###### ECS Cluster ###########################################################

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${ECSClusterName}-executionrole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: EC2EthereumPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - ecs:CreateCluster"
              - ecs:DeregisterContainerInstance"
              - ecs:DiscoverPollEndpoint"
              - ecs:Poll"
              - ecs:RegisterContainerInstance"
              - ecs:StartTelemetrySession"
              - ecs:Submit*"
              - ecr:GetAuthorizationToken"
              - ecr:BatchCheckLayerAvailability"
              - ecr:GetDownloadUrlForLayer"
              - ecr:BatchGetImage"
              - logs:CreateLogStream"
              - logs:PutLogEvents"
              - dynamodb:BatchGetItem"
              - dynamodb:BatchWriteItem"
              - dynamodb:PutItem"
              - dynamodb:DeleteItem"
              - dynamodb:GetItem"
              - dynamodb:Scan"
              - dynamodb:Query"
              - dynamodb:UpdateItem"
            Resource: "*"

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      # AvailabilityZones: !Ref AvailabilityZones # TODO:
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      # VPCZoneIdentifier: !Ref Subnets TODO:
      # allow remove before replace
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      # Tags:
      #   - Key: Name
      #     Value: !Sub aoso
      #     PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        # allow to remove during update
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT10M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

  DataVolumeA:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Iops: !If
        - IopsSupported
        - !Ref Iops
        - !Ref "AWS::NoValue"
      Size: !Ref VolumeSize
      VolumeType: !Ref VolumeType
      SnapshotId: !Ref SnapshotId
      # Tags:
      #   - Key: StackId
      #     Value: !Ref "AWS::StackId"

  DataVolumeB:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Iops: !If
        - IopsSupported
        - !Ref Iops
        - !Ref "AWS::NoValue"
      Size: !Ref VolumeSize
      VolumeType: !Ref VolumeType
      SnapshotId: !Ref SnapshotId
      # Tags:
      #   - Key: StackId
      #     Value: !Ref "AWS::StackId"

  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - DataVolumeA
      - DataVolumeB
    Properties:
      AssociatePublicIpAddress: true
      ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      KeyName: !If
        - SSHAccess
        - !Ref KeyName
        - !Ref "AWS::NoValue"
      SecurityGroups:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref ECSInstanceProfile
      # BlockDeviceMappings:
      # - DeviceName: "/dev/sdh"
      #   Ebs:
      #     SnapshotId: !Ref SnapshotId
      #     VolumeSize: !Ref VolumeSize
      #     VolumeType: !Ref VolumeType
      #     Iops: !Ref Iops
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          set -x
          yum install -y aws-cfn-bootstrap jq
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup
###### VPC ###########################################################

  EthVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref EthVPC

  EthVPCEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref EthVPC

  ElasticIpAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt EthVPCEIP.AllocationId

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetACidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref EthVPC

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetBCidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref EthVPC

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetACidr
      MapPublicIpOnLaunch: false
      VpcId: !Ref EthVPC

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetBCidr
      MapPublicIpOnLaunch: false
      VpcId: !Ref EthVPC

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to manage access to ETH Application Load Balancer
      GroupName: !Ref ApplicationLoadBalancerSecurityGroupName
      VpcId: !Ref EthVPC

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to manage access to ETH EC2
      GroupName: !Ref EC2SecurityGroupName
      VpcId: !Ref EthVPC

  EC2InboundFromAlb:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref AlbSecurityGroup
      ToPort: -1

  EC2InboundFromEC2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      ToPort: -1

  AlbInboundFromAlb:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref AlbSecurityGroup
      ToPort: -1

  AlbInboundFromEC2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      ToPort: -1

  AlbOutboundToAlb:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      FromPort: -1
      DestinationSecurityGroupId: !Ref AlbSecurityGroup
      IpProtocol: -1
      GroupId: !Ref AlbSecurityGroup
      ToPort: -1

  AlbOutboundToEC2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      FromPort: -1
      DestinationSecurityGroupId: !Ref EC2SecurityGroup
      IpProtocol: -1
      GroupId: !Ref AlbSecurityGroup
      ToPort: -1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EthVPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EthVPC

  DefaultPrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EthVPC

  DefaultPrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBEIP.AllocationId
      SubnetId: !Ref PublicSubnetB

  NatGatewayAEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayBEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
